// File: frontend/src/pages/Home.jsx
import React, { useState, useEffect } from "react";
import ThoughtCard from "../components/ThoughtCard";
import NewThoughtForm from "../components/NewThoughtForm";
import { v4 as uuidv4 } from "uuid";
import { useSearchParams, Link } from "react-router-dom";

const API_URL = process.env.REACT_APP_API_URL;
const PAGE_SIZE = 5;

const promptForName = () => {
  let name;
  do {
    name = prompt("Choose a username:")?.trim();
  } while (!name);
  return name;
};

export default function Home() {
  const [thoughts, setThoughts] = useState([]);
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [hasMore, setHasMore] = useState(true);
  const [identity, setIdentity] = useState({ userId: null, username: "" });
  const [searchParams] = useSearchParams();
  const filterUserId = searchParams.get("userId");

  useEffect(() => {
    const existingId = localStorage.getItem("userId");
    const existingName = localStorage.getItem("username");

    const userId = existingId || uuidv4();
    const username = existingName || promptForName();

    if (!existingId) localStorage.setItem("userId", userId);
    if (!existingName) localStorage.setItem("username", username);

    setIdentity({ userId, username });
  }, []);

  useEffect(() => {
    setLoading(true);
    setError(null);
    let url = `${API_URL}/thoughts?page=${page}`;
    if (filterUserId) url += `&userId=${filterUserId}`;

    fetch(url)
      .then(res => {
        if (!res.ok) return res.json().then(err => { throw new Error(err.error || "Something went wrong."); });
        return res.json();
      })
      .then(data => {
        setThoughts(prev => page === 1 ? data : [...prev, ...data]);
        setHasMore(data.length === PAGE_SIZE);
      })
      .catch(err => setError(err.message))
      .finally(() => setLoading(false));
  }, [page, filterUserId]);

  useEffect(() => {
    if (page === 1) window.scrollTo({ top: 0, behavior: "smooth" });
  }, [thoughts]);

  const addThought = (newThought) => {
    const enhancedThought = {
      ...newThought,
      author: identity.username,
      userId: identity.userId
    };

    setLoading(true);
    setError(null);
    fetch(`${API_URL}/thoughts`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(enhancedThought)
    })
      .then(res => {
        if (!res.ok) return res.json().then(err => { throw new Error(err.error || "Failed to submit thought."); });
        return res.json();
      })
      .then(() => {
        setPage(1);
        setThoughts([]);
      })
      .catch(err => setError(err.message))
      .finally(() => setLoading(false));
  };

  const deleteThought = (id) => {
    if (!window.confirm("Are you sure you want to delete this thought?")) return;
    fetch(`${API_URL}/thoughts/${id}`, { method: "DELETE" })
      .then(res => {
        if (!res.ok) return res.json().then(err => { throw new Error(err.error || "Failed to delete thought."); });
        setThoughts(prev => prev.filter(t => t.id !== id));
      })
      .catch(err => setError(err.message));
  };

  return (
    <div className="max-w-2xl mx-auto">
      <p className="text-sm text-zinc-400 mt-2 text-center">Welcome, {identity.username}!</p>
      <Link
        to={`/?userId=${identity.userId}`}
        className="text-xs text-teal-400 underline hover:text-teal-300 block text-center mt-2"
      >
        View only my thoughts
      </Link>
      <NewThoughtForm onSubmit={addThought} />
      {error && (
        <div className="mt-2 text-center">
          <p className="text-red-400 text-sm">{error}</p>
          <button
            onClick={() => setPage(prev => prev)}
            className="mt-1 text-sm underline text-red-300 hover:text-red-200"
          >
            Retry
          </button>
        </div>
      )}
      <div className={`mt-6 transition-opacity duration-300 ${loading ? "opacity-50" : "opacity-100"}`}>
        {thoughts.length === 0 && !loading && !error && (
          <p className="text-center text-sm text-zinc-400">No thoughts found.</p>
        )}
        {thoughts.map(thought => (
          <ThoughtCard
            key={thought.id}
            author={thought.author}
            content={thought.content}
            tags={thought.tags}
            userId={thought.userId}
            showDelete={identity.userId === thought.userId}
            onDelete={() => deleteThought(thought.id)}
          />
        ))}
        {hasMore && (
          <div className="text-center mt-4">
            <button
              onClick={() => setPage(prev => prev + 1)}
              disabled={loading}
              className={`bg-zinc-700 hover:bg-zinc-600 px-4 py-2 rounded text-white font-semibold ${loading ? "opacity-50 cursor-not-allowed" : ""}`}
              aria-label="Load more thoughts"
            >
              {loading ? "Loading..." : "Load More"}
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
